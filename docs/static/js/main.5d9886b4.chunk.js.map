{"version":3,"sources":["components/originalComponent.js","components/HOC.js","app.js","serviceWorker.js","index.js"],"names":["withFunctions","WrappedComponent","incrementValue","props","commonFunc","bind","state","count","this","setState","prevState","numCount","wrapValue","React","Component","originalProp","onClick","Dad","bakeCookies","Son","onPointerMove","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPA6BeA,EC3BO,SAACC,EAAkBC,GAAoB,IACnDF,EADkD,kDAGpD,WAAYG,GAAQ,IAAD,8BACf,cAAMA,IAEDC,WAAa,EAAKA,WAAWC,KAAhB,gBAElB,EAAKC,MAAQ,CACTC,MAAO,GANI,EAHiC,yDAchDC,KAAKC,UAAS,SAAAC,GACV,MAAO,CAAEH,MAAOG,EAAUH,MAAQL,QAfU,+BAoBhD,OAAO,kBAACD,EAAD,eAAkBM,MAAOC,KAAKF,MAAMC,MAAOI,SAAUH,KAAKJ,WAAYQ,UAAU,kBAAqBJ,KAAKL,YApBjE,GAC5BU,IAAMC,WAuBlC,OAAOd,EDGIA,C,kDAzBX,WAAYG,GAAQ,IAAD,8BACf,cAAMA,IAEDG,MAAQ,GAHE,E,qDAQT,IAAD,EACqBE,KAAKL,MAAxBI,EADF,EACEA,MAAOI,EADT,EACSA,SAEd,OACI,6BACI,sCAAYH,KAAKL,MAAMY,cAEvB,wCAAcP,KAAKL,MAAMS,WAEzB,4BAAQI,QAAWL,GAAnB,UAAqCJ,EAArC,U,GAlBgBM,IAAMC,WA0BU,G,MEAnBD,IAAMC,UAMfD,IAAMC,UAsDJD,IAAMC,U,IA0BtBG,EAAM,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OACV,kBAAC,EAAD,CAAKA,YAAaA,KAIdC,EAAM,SAAC,GAAD,IAAGD,EAAH,EAAGA,YAAH,OACV,yBAAKE,cAAeF,GAApB,kBAqCaG,MAzBf,WAgBE,OACE,yBAAKC,UAAU,OAEb,kBAAC,EAAD,CAAmBP,aAAa,mCC5IlBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAIFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5d9886b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withFunctions, otherHOC } from './HOC';\r\n\r\nclass OriginalComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {count, numCount} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h1>Hello, {this.props.originalProp}</h1>\r\n\r\n                <h1>New prop {this.props.wrapValue}</h1>\r\n\r\n                <button onClick = {numCount}> Click {count} </button>\r\n            </div> \r\n            \r\n\r\n        )\r\n    };\r\n}\r\n\r\nexport default withFunctions(OriginalComponent, 5);","import React from 'react';\r\n\r\nconst withFunctions = (WrappedComponent, incrementValue) => {\r\n    class withFunctions extends React.Component {\r\n\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            this.commonFunc = this.commonFunc.bind(this);\r\n\r\n            this.state = {\r\n                count: 0\r\n            }\r\n        }\r\n\r\n        commonFunc() {\r\n            this.setState(prevState => {\r\n                return { count: prevState.count + incrementValue }\r\n            })\r\n        }\r\n\r\n        render() {\r\n            return <WrappedComponent count={this.state.count} numCount={this.commonFunc} wrapValue='value-from-HOC' {...this.props}/>\r\n        }\r\n\r\n    }\r\n    return withFunctions;\r\n}\r\n\r\nconst otherHOC = (WrappedComponent) => {\r\n    class otherHOC extends React.Component {\r\n\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            this.image = 'value-from-withFunctions';\r\n\r\n            this.numCount = this.numCount.bind(this);\r\n\r\n            this.state = {\r\n                count: 0\r\n            }\r\n        }\r\n\r\n        numCount() {\r\n            this.setState(prevState => {\r\n                return { count: prevState.count + 5 }\r\n            })\r\n        }\r\n\r\n        render() {\r\n            return <WrappedComponent count={this.state.count} numCount={this.numCount} wrapValue={this.image} />\r\n        }\r\n\r\n    }\r\n    return otherHOC;\r\n}\r\n\r\nexport {\r\n    withFunctions, \r\n    otherHOC\r\n};\r\n","import React from 'react';\r\nimport OriginalComponent from './components/originalComponent';\r\nimport './app.css';\r\nfunction Detail(props) {\r\n\r\n  const _styles = {\r\n    borderColor: \"red\",\r\n    height: \"200px\",\r\n    border: \"solid\"\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Hello, {props.name} - {props.age}</h1>\r\n      <div style={_styles}>child content\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Welcome(props) {\r\n  return (\r\n    <Detail name={props.name} age={props.age}>\r\n      <h1>welcom component content</h1>\r\n    </Detail>\r\n  );\r\n}\r\n\r\nclass WelcomeByClass extends React.Component {\r\n  render() {\r\n  return <h1>Hello, {this.props.name}, {this.props.age}</h1>;\r\n  }\r\n}\r\n\r\nclass Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { date: new Date() };\r\n\r\n    this.tickByHand = this.tickByHand.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(\r\n      () => this.tick(),\r\n      1000\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n\r\n  tickByHand() {\r\n    this.setState({\r\n      date: new Date(2020, 12, 2)\r\n    })\r\n\r\n    this.newValue = this.state.date.toLocaleTimeString();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n        <h2>It is {this.state.date.toLocaleTimeString()}</h2>\r\n\r\n        <h2 onClick={this.tickByHand}>Tick by hand: {this.newValue}</h2>\r\n\r\n        {\r\n          this.props.unreadMessages.length > 0 &&\r\n          <h2>\r\n            You have {this.props.length} unread messages\r\n          </h2>\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Grandma extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cookies: 0\r\n    }\r\n  }\r\n\r\n  bakeCookies = () => {\r\n    this.setState({ cookies: this.state.cookies + 10 })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>cookies= {this.state.cookies}</h1>\r\n\r\n        <Dad bakeCookies={this.bakeCookies}>\r\n\r\n        </Dad>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst Dad = ({ bakeCookies }) => (\r\n  <Son bakeCookies={bakeCookies}>\r\n  </Son>\r\n);\r\n\r\nconst Son = ({ bakeCookies }) => (\r\n  <div onPointerMove={bakeCookies}>\r\n    CLICK TO BAKE\r\n  </div>\r\n);\r\n\r\nconst Button = props => {\r\n  const { kind, ...other } = props;\r\n  const className = kind === \"primary\" ? \"PrimaryButton\" : \"SecondaryButton\";\r\n\r\n  return <button className={className} {...other} />;\r\n};\r\n\r\nfunction App() {\r\n\r\n  /*return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n  \r\n        <WelcomeByClass {...data}></WelcomeByClass>\r\n\r\n        <Button kind=\"primary\" type=\"en\" text=\"value\" onClick={btnClick}>\r\n          CLICK BUTTON\r\n        </Button>\r\n\r\n      </header>\r\n    </div>\r\n  );*/\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <OriginalComponent originalProp='value from wrapped component'></OriginalComponent>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n\r\n    <App />\r\n\r\n  </React.StrictMode>,\r\n  \r\n  document.getElementById('root')\r\n);\r\n\r\n/*function Clock(props) {\r\n  return (\r\n    <div>\r\n      <h1>Hello, world!</h1>\r\n      <h2>It is {props.date.toLocaleTimeString()}.</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction tick() {\r\n  ReactDOM.render(\r\n    <Clock date={new Date()} />,\r\n    document.getElementById('root')\r\n  );\r\n}*/\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}